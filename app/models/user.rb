# == Schema Information
#
# Table name: users
#
#  id                 :integer         not null, primary key
#  name               :string(255)
#  email              :string(255)
#  created_at         :datetime
#  updated_at         :datetime
#  encrypted_password :string(255)
#  salt               :string(255)
#

class User < ActiveRecord::Base

  attr_accessor :password # because it is not a users table field  
  attr_accessible :name, :email, :password, :password_confirmation
  # this attr_accessible are used in the sign up process so must be defined  
  email_regex = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i 

  validates :name, :presence => true, 
                   :length => {:minimum => 5, :maximum => 50}
  validates :email, :presence => true, 
                    :format => { :with => email_regex },
                    :uniqueness => true
  validates :password, :presence => true ,
                       :confirmation => true,
                       :length => { :within => 6..40 }

  before_save :encrypt_password # ActiveRecord Callback here needs the salt.

  def has_password?(submitted_password)
    # Return true if the user's password matches the submitted password.
    # Compare encrypted_password with the encrypted version of submitted_password
    encrypted_password == encrypt(submitted_password)    
  end

  def self.authenticate(email, submitted_password)
    # self.authenticate is the same than User.authenticate
    # return an authenticate user on password match or nil otherwise
    # this uses the has_password? method created above
    user = User.find_by_email(email)    
    return nil if user.nil?    
    return user if user.has_password?(submitted_password)
  end
  
  private
  
    def secure_hash(string)
      Digest::SHA2.hexdigest(string)
    end

    def make_salt
      secure_hash "#{Time.now.utc}--#{password}"      
    end

    def encrypt_password
      # new_record? return true if the obj. has not been saved to DB,
      # so the salt is created only once when the user is first created
      # here self is a user object, so self.salt is the same as user.salt 
      self.salt = make_salt if new_record? 
      self.encrypted_password = encrypt(self.password)
    end

    def encrypt(string)
      # uses the salt generated by make_salt to do the encrypt
      secure_hash "#{salt}--#{string}"
    end
                         
end
